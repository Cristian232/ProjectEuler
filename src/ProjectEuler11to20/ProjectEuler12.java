package ProjectEuler11to20;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.Calendar;
import java.util.Timer;

//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//        Let us list the factors of the first seven triangle numbers:
//
//        1: 1
//        3: 1,3
//        6: 1,2,3,6
//        10: 1,2,5,10
//        15: 1,3,5,15
//        21: 1,3,7,21
//        28: 1,2,4,7,14,28
//        We can see that 28 is the first triangle number to have over five divisors.
//
//        What is the value of the first triangle number to have over five hundred divisors?
public class ProjectEuler12 {

    int howManyFactors(int n){
        int count = 0;
        for (int i = 1; i <= n ; i++) {
            if (n%i==0){
                count++;
            }
        }
        return count;
    }

    int tryOn(){
        int x = 0;

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
      //  System.out.println( sdf.format(cal.getTime()) );
        Instant x1 = Instant.now();
        for (int i = 11000; i < 100000 ; i++) {
            x = 0;

            for (int j = 0; j < i ; j++) {
                x = x + j;
            }

            if (howManyFactors(x)>500){
                System.out.println(x);
                return x;
            }
            if (i%100==0){
                System.out.println("i>>" + " " +i + "\n" + Instant.now() +"\n"+x1);
                System.out.println("x=" + x + "  " + howManyFactors(x));
            }

        }

        return 0;
    }


}
